# -*- coding: utf-8 -*-
"""Practica3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yo2Sqr_H1UcJzulEuTjQ31q7GNtUR9U3

# Practica 03

Alumno: David Pérez Jacome \\
Número de Cuenta: 316330420

1. Comprobar si las stopwords que encontramos en paqueterias de NLP coinciden con las palabras más comúnes obtenidas en Zipf.

  - Utilizar el corpus CREA
  - Realizar una nube de palabras usando las stopwords de paqueteria y las obtenidas através de Zipf
  - Responder las siguientes preguntas:
    - ¿Obtenemos el mismo resultado? Si o no y ¿Porqué?
"""

import nltk
from nltk.corpus import stopwords
from collections import Counter
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Descargar el corpus CREA si no está descargado
nltk.download('cess_esp')

# Obtener las palabras del corpus CREA
crea_words = nltk.corpus.cess_esp.words()

# Obtener las stopwords del paquete nltk
nltk.download('stopwords')
nltk_stopwords = set(stopwords.words('spanish'))

# Contar la frecuencia de las palabras en el corpus CREA
word_freq = Counter(crea_words)

# Ordenar las palabras por frecuencia en orden descendente
sorted_word_freq = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)

# Obtener las 100 palabras más comunes según la Ley de Zipf
zipf_words = [word for word, freq in sorted_word_freq[:100]]

# Comprobar si las stopwords coinciden con las palabras más comunes según Zipf
common_stopwords = set(nltk_stopwords) & set(zipf_words)

# Imprimir las stopwords comunes
print("Stopwords comunes entre las stopwords de NLTK y las palabras más comunes según Zipf:")
print(common_stopwords)

# Crear una nube de palabras con las stopwords y las palabras más comunes según Zipf
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(common_stopwords))
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Nube de palabras con stopwords comunes')
plt.show()

# Responder las preguntas
print("\nRespuestas:")
print("1.1.1 ¿Obtenemos el mismo resultado? Si o no y ¿Por qué?")
if len(common_stopwords) > 0:
    print("Sí, obtenemos algunas stopwords comunes entre las stopwords de NLTK y las palabras más comunes según Zipf.")
    print("Esto se debe a que las stopwords son palabras muy frecuentes en un idioma, por lo que es probable que algunas de ellas coincidan con las palabras más comunes según la Ley de Zipf.")
else:
    print("No, no obtenemos stopwords comunes entre las stopwords de NLTK y las palabras más comunes según Zipf.")

"""1. Comprobar si Zipf se cumple para un lenguaje artificial creado por ustedes

  - Deberán darle un nombre a su lenguaje
  - Mostrar una oración de ejemplo
  - Pueden ser una secuencia de caracteres aleatorios
  - Tambien pueden definir el tamaño de las palabras de forma aleatoria
"""

import random
from collections import Counter

# Definir el nombre del lenguaje artificial
language_name = "LenguaAI2.0"

# Crear una oración de ejemplo con caracteres aleatorios
def generate_random_sentence():
    sentence_length = random.randint(5, 15)  # Longitud de la oración aleatoria
    sentence = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz ', k=sentence_length))  # Caracteres aleatorios
    return sentence.capitalize()  # Devuelve la oración con la primera letra en mayúscula

# Generar una oración de ejemplo
example_sentence = generate_random_sentence()

# Imprimir el nombre del lenguaje y la oración de ejemplo
print("Nombre del lenguaje artificial:", language_name)
print("Oración de ejemplo:", example_sentence)

# Contar la frecuencia de las palabras en la oración de ejemplo
word_freq = Counter(example_sentence.split())

# Ordenar las palabras por frecuencia en orden descendente
sorted_word_freq = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)

# Imprimir las palabras y sus frecuencias
print("\nPalabras en la oración de ejemplo y sus frecuencias:")
for word, freq in sorted_word_freq:
    print(word, "-", freq)

# Comprobar si Zipf se cumple
zipf_words = [word for word, freq in sorted_word_freq[:10]]  # Tomar las 10 palabras más comunes como referencia
zipf_ranks = range(1, len(zipf_words) + 1)  # Rangos según la Ley de Zipf

# Imprimir los rangos Zipf y las palabras correspondientes
print("\nRangos Zipf y palabras correspondientes:")
for rank, word in zip(zipf_ranks, zipf_words):
    print("Rango:", rank, "- Palabra:", word)